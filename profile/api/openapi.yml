openapi: 3.0.0

info:
  version: 1.0.0
  title: Profile service API
  contact:
    name: Dmitry Novikov
    email: dredfort.42@gmail.com
    url: "https://github.com/dredfort42"
  license:
    name: GNU General Public License v3.0
    url: "https://www.gnu.org/licenses/gpl-3.0.html"
  x-logo:
    url: "https://avatars.githubusercontent.com/u/102029973?v=4"
  description: |
    This is a description of the Profile service API and its operations.

tags:
  - name: User
    description: |
      The Profile user operations.
  - name: Device
    description: |
      The Profile device operations.

servers:
  - url: "http://localhost:4284"
    description: "Local server"

paths:
  /api/v1/profile/user:
    post:
      tags:
        - User
      summary: Create a new user
      description: "Create a new user in the Profile service."
      operationId: "UserCreate"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile created successfully"
                  profile:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                invalidJSON:
                  summary: Invalid JSON
                  value:
                    error: "invalid_request"
                    error_description: "Invalid request"
                missingFields:
                  summary: Missing required fields
                  value:
                    error: "invalid_request"
                    error_description: "Missing required fields"
        "409":
          description: Profile already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                profileExists:
                  summary: Profile already exists
                  value:
                    error: "invalid_request"
                    error_description: "Profile already exists"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                missingEmail:
                  summary: Missing email
                  value:
                    error: "invalid_request"
                    error_description: "Missing email"
                createUserError:
                  summary: Create user error
                  value:
                    error: "server_error"
                    error_description: "Error creating user profile"

components:
  schemas:
    UserCreate:
      type: object
      properties:
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Smith"
        date_of_birth:
          type: string
          format: date # YYYY-MM-DD
        gender:
          type: string
          enum:
            - man
            - woman
            - other
      required:
        - first_name
        - last_name
        - date_of_birth

    User:
      allOf:
        - $ref: "#/components/schemas/UserCreate"
        - type: object
          properties:
            email:
              type: string
              format: email
              example: "john.smith@example.com"
          required:
            - email

    Error:
      type: object
      properties:
        error:
          type: string
          example: "invalid_request"
        error_description:
          type: string
          example: Missing required fields

  # authorized.GET("/api/v1/profile/user", UserGet)
  # authorized.POST("/api/v1/profile/user", UserCreate)
  # authorized.GET("/api/v1/profile/devices", DevicesGet)
  # authorized.POST("/api/v1/profile/devices", DeviceCreate)
  # authorized.PUT("/api/v1/profile/devices", UpdateDevice)
  # authorized.DELETE("/api/v1/profile/devices", DeviceDelete)
